name: Deployment

on:
  push:
    branches: [ "master" ]

env:
  NODE_VERSION: '18.12.1'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: 'production'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '[".env.template"]'
        env:
          FIREBASE_DB_URL: ${{ secrets.FIREBASE_DB_URL }}
          AWS_USER: ${{ secrets.AWS_USER }}
          AWS_KEY: ${{ secrets.AWS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          FB_PROJECT_ID: ${{ secrets.FB_PROJECT_ID }}
          FB_KEY: ${{ secrets.FB_KEY }}
          FB_EMAIL: ${{ secrets.FB_EMAIL }}
          CORS_URL: ${{ secrets.CORS_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Rename .env.template to .env.production
        run: |
          mv .env.template .env.production

      - name: Yarn Install
        uses: Borales/actions-yarn@v4.2.0
        with:
          cmd: install

      - name: npm build
        run: |
          npm run lint 
          npm run build

      - name: Prisma deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npm run prisma:generate
          npm run prisma:validate
          npm run prisma:deploy

      - name: Compress build
        run: |
          tar --exclude='node_modules' -czvf artifacts.tar.gz ./* .[!.]*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: artifacts.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: 'production'
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: SSH - Ensure temp folder for upload
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22
          script: |
            mkdir -p ${{ secrets.FTP_DIST_TEMP_DIR }}

      - name: SFTP - Deploy website
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ secrets.FTP_USER }}
          server: ${{ secrets.FTP_HOST }}
          port: 22
          local_path: './artifacts.tar.gz'
          remote_path: ${{ secrets.FTP_DIST_TEMP_DIR }}/
          sftp_only: true
          password: ${{ secrets.FTP_PASSWORD }}

      - name: SSH - Clear previous App and stop Services
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 22
          debug: true
          script: |
            which -a node
            echo $PATH
            cd ${{ secrets.FTP_DIST_TEMP_DIR }}/
            tar -xzvf artifacts.tar.gz
            rm artifacts.tar.gz
            yarn install --production
      
            cd /
            pm2 stop cerebro_api
            service mysql stop
            rm -r ${{ secrets.FTP_DIST_DIR }} | exit 0
            
            mv ${{ secrets.FTP_DIST_TEMP_DIR }} ${{ secrets.FTP_DIST_DIR }} 
            cd ${{ secrets.FTP_DIST_DIR }}
            pm2 start cerebro_api
            service mysql start

            
